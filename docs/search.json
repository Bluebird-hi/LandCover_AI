[
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007",
    "crumbs": [
      "Clustering Analysis"
    ]
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");",
    "crumbs": [
      "Clustering Analysis"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello everyone\n\n\nOn this about page, you might want to add more information about yourself, the project, or course.\n\n\nMy name is Eric Delmelle, the instructor for the course.\nYou can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2024.\nWrite something about you\n\nor about something you like"
  },
  {
    "objectID": "1-index.html#in-brief",
    "href": "1-index.html#in-brief",
    "title": "Reimagining U.S. National Parks Through AI Classification",
    "section": "In Brief",
    "text": "In Brief",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "1-index.html#author",
    "href": "1-index.html#author",
    "title": "Reimagining U.S. National Parks Through AI Classification",
    "section": "Author",
    "text": "Author\n\n\n\n\nLuming Xu\n\n\nMaster of Urban Spatial Analytics’25 at UPenn\nI’m interested in smart city and urban vitality :)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "2-mapping.html",
    "href": "2-mapping.html",
    "title": "Mapping National Park Service Lands",
    "section": "",
    "text": "The United States has 63 national parks, which are congressionally designated protected areas operated by the National Park Service (NPS), an agency of the Department of the Interior. The NPS provides accurate and up-to-date geospatial data for my analysis of US national parks. In this section, I delve into national park visitation data to have an overview of my research subject.",
    "crumbs": [
      "Mapping NPS Lands"
    ]
  },
  {
    "objectID": "2-mapping.html#data-wrangling-pre-processing",
    "href": "2-mapping.html#data-wrangling-pre-processing",
    "title": "Mapping National Park Service Lands",
    "section": "Data wrangling & pre-processing",
    "text": "Data wrangling & pre-processing\nAfter exploring the NPS datasets, I wrangled the boundaries, centroids, and recreation visitors of national parks.\n\nVisitation by state and by park report\nAnnual park ranking report for recreation visits\nPark centroids and boundaries\nCartographic boundary files\n\n\n\nCode\nvisit = pd.read_csv(\"data/Visitation_By_State_and_By_Park_2024.csv\")\n\nranking = pd.read_csv(\"data/Annual_Park_Ranking_Report_2024.csv\")\n\nboundary = gpd.read_file(\"data/NPS_Land_Resources_Division_Boundary_and_Tract_Data_Service_-5587735897574432707.geojson\")\ncentroids = gpd.read_file(\"data/NPS_Land_Resources_Division_Boundary_and_Tract_Data_Service_-43869052243415023.geojson\")\n\nraw_states = gpd.read_file(\"data/cb_2023_us_state_5m/cb_2023_us_state_5m.shp\")\nraw_states = raw_states.to_crs(epsg=2163)\n\n\n\n\n\n\n\n\n\n\n\nState\nPark\nRecreation Visitors\nPercent Change\n\n\n\n\n0\nAlabama\nHorseshoe Bend NMP\n64,063\n-11.91%\n\n\n1\nAlabama\nLittle River Canyon NPRES\n763,209\n8.93%\n\n\n2\nAlabama\nNatchez Trace PKWY\n515,538\n8.55%\n\n\n3\nAlabama\nRussell Cave NM\n9,261\n6.72%\n\n\n4\nAlabama\nTuskegee Airmen NHS\n28,474\n28.95%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParkName\nRank\nValue\nPercentOfTotal\n\n\n\n\n0\nGolden Gate NRA\n1\n17,187,508\n5.18%\n\n\n1\nBlue Ridge PKWY\n2\n16,733,639\n5.04%\n\n\n2\nGreat Smoky Mountains NP\n3\n12,191,834\n3.67%\n\n\n3\nGateway NRA\n4\n8,929,035\n2.69%\n\n\n4\nLincoln Memorial\n5\n8,479,349\n2.56%\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nCreationDate\nCreator\nEditDate\nEditor\nGlobalID\nAreaID\nUNIT_CODE\nUNIT_NAME\nDATE_EDIT\nSTATE\nREGION\nGNIS_ID\nUNIT_TYPE\nCREATED_BY\nPARKNAME\ngeometry\n\n\n\n\n0\n1\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\n80f3c063-6563-452e-b562-5ea86fb62195\n272\nHOCU\nHopewell Culture National Historical Park\nMon, 13 Jan 2025 00:00:00 GMT\nOH\nMW\n1888931\nNational Historical Park\nLands\nHopewell Culture\nPOINT (-83.13505 39.27882)\n\n\n1\n2\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\nf3606efb-75bf-4349-8f44-30fc23a8c530\n87\nWICA\nWind Cave National Park\nFri, 31 Jan 2025 00:00:00 GMT\nSD\nMW\n1263056\nNational Park\nLands\nWind Cave\nPOINT (-103.42879 43.57532)\n\n\n2\n3\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\n80a8e4fd-40d1-4661-b7b0-f8769bf677ef\n281\nVOYA\nVoyageurs National Park\nTue, 04 Feb 2025 00:00:00 GMT\nMN\nMW\n660491\nNational Park\nLands\nVoyageurs\nPOINT (-92.88555 48.46568)\n\n\n3\n4\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\n1c4dff25-5eb9-4b6a-8aaf-24ddaf871d6f\n276\nSACN\nSaint Croix National Scenic Riverway\nThu, 20 Feb 2025 00:00:00 GMT\nMN\nMW\n1888958\nNational Wild & Scenic River\nLands\nSaint Croix\nPOINT (-92.01717 46.02934)\n\n\n4\n5\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\nWed, 09 Apr 2025 13:55:54 GMT\nNPS_WASO_LANDS\n799247de-34c3-4814-b81c-373a8d8d005a\n269\nOZAR\nOzark National Scenic Riverways\nMon, 10 Feb 2025 00:00:00 GMT\nMO\nMW\n751466\nNational River\nLands\nOzark\nPOINT (-91.32406 37.24240)\n\n\n\n\n\n\n\nVisitation data and centroids of the national parks are merged for further geospatial analysis.\n\n\n\n\n\n\n\n\n\nParkName\nRank\nValue\nPercentOfTotal\nPARKNAME\nUNIT_CODE\nUNIT_TYPE\ngeometry\nSTATE\n\n\n\n\n0\nGolden Gate NRA\n1\n17,187,508\n5.18%\nGolden Gate\nNRA\nNational Recreation Area\nPOINT (-122.68760 37.94684)\nCA\n\n\n1\nGreat Smoky Mountains NP\n3\n12,191,834\n3.67%\nGreat Smoky Mountains\nNP\nNational Park\nPOINT (-83.49810 35.62216)\nNC\n\n\n2\nGateway NRA\n4\n8,929,035\n2.69%\nGateway\nNRA\nNational Recreation Area\nPOINT (-73.85713 40.59855)\nNJ\n\n\n3\nLincoln Memorial\n5\n8,479,349\n2.56%\nLincoln\nMemorial\nNational Memorial\nPOINT (-77.05021 38.88928)\nDC\n\n\n4\nGulf Islands NS\n6\n7,801,176\n2.35%\nGulf Islands\nNS\nNational Seashore\nPOINT (-87.01818 30.35539)\nFL",
    "crumbs": [
      "Mapping NPS Lands"
    ]
  },
  {
    "objectID": "2-mapping.html#distribution-of-national-park-service-lands",
    "href": "2-mapping.html#distribution-of-national-park-service-lands",
    "title": "Mapping National Park Service Lands",
    "section": "Distribution of National Park Service lands",
    "text": "Distribution of National Park Service lands\n\n\nCode\nstates_gdf = gpd.GeoDataFrame(raw_states, geometry='geometry')\nstates_gdf = states_gdf.to_crs(epsg=2163)\n# boundary_gdf = gpd.GeoDataFrame(boundary, geometry='geometry')\n# boundary_gdf = boundary_gdf.to_crs(epsg=2163)\ncentroids_gdf = gpd.GeoDataFrame(centroids, geometry='geometry')\ncentroids_gdf = centroids_gdf.to_crs(epsg=2163)\n# Hvplot\np=centroids_gdf.hvplot.points(\n    c=\"UNIT_TYPE\", geo = True,\n    crs=2163, cmap=\"Category20\", hover_cols=[\"PARKNAME\",'STATE'],\n    title = 'Distribution of National Park Service Lands',\n    legend=True)\ns = states_gdf.hvplot.polygons(\n    geo=True,\n    crs=2163,\n    alpha=0,\n    line_alpha=1,\n    line_color=\"black\",\n    hover=False\n)\np*s",
    "crumbs": [
      "Mapping NPS Lands"
    ]
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  }
]